@charset "utf-8";
// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default;

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components.
$modules: () !default;
@mixin exports($name) {
  // Import from global scope
  $modules: $modules !global;
  // Check if a module is already on the list
  $module_index: index($modules, $name);
  @if (($module_index == null) or ($module_index == false)) {
    $modules: append($modules, $name) !global;
    @content;
  }
}

//
// @functions
//


// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range){
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// TEXT INPUT TYPES

@function text-inputs( $types: all, $selector: input ) {

    $return: ();

    $all-text-input-types:
      text
      password
      date
      datetime
      datetime-local
      month
      week
      email
      number
      search
      tel
      time
      url
      color
      textarea;

    @if $types == all { $types: $all-text-input-types; }

    @each $type in $types {
        @if $type == textarea {
            @if $selector == input {
              $return: append($return, unquote('#{$type}'), comma)
            } @else {
              $return: append($return, unquote('#{$type}#{$selector}'), comma)
            }
        } @else {
            $return: append($return, unquote('#{$selector}[type="#{$type}"]'), comma)
        }
    }

    @return $return;

}

// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function data($attr) {
  @if $namespace {
    @return '[data-' + $namespace + '-' + $attr + ']';
  }

  @return '[data-' + $attr + ']';
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function emCalc($values){
  @return rem-calc($values);
}

// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function em-calc($values){
  @return rem-calc($values);
}


//Test of the hover over effect
$image-hover-wrapper-transition: all 500ms cubic-bezier(0.68, -0.55, 0.265, 1.55);
$image-hover-wrapper-transition-delay: 0.25s;
$image-hover-wrapper-banner-width: 75%;
$image-hover-wrapper-banner-topspace: 25%;
$image-hover-wrapper-banner-bg: rgba($primary-color ,0.8);
$image-hover-wrapper-icon-size: 24px;

.image-hover-wrapper {
  position: relative;

  a {
    display: inline-block;
    letter-spacing: normal;
    line-height: initial;
    margin: 0;
    padding: 0;
    position: relative;

    img {
      float: left;
      overflow: hidden;
      width: 100%;
    }

    .image-hover-wrapper-reveal {
      background-color: rgba(0, 0, 0, 0.5);
      color: $white;
      display: inline;
      height: 100%;
      margin-left: -100%;
      opacity: 0;
      position: absolute;
      width: 100%;
      z-index: 80;
      transition: $image-hover-wrapper-transition;
      transition-delay: $image-hover-wrapper-transition-delay;

      &:hover {
        opacity: 1;
        transition: $image-hover-wrapper-transition;
      }

      &:hover p {
        opacity: 1;
        transform: translateY(-100%);
        transition: $image-hover-wrapper-transition;
        transition-delay: $image-hover-wrapper-transition-delay;
      }

      p {
        bottom: 0;
        display: block;
        opacity: 0;
        position: absolute;
        text-align: center;
        width: 100%;
        transition: $image-hover-wrapper-transition;
      }
    }

    .fa {
      font-size: $image-hover-wrapper-icon-size;
    }
  }

  .image-hover-wrapper-banner {
    background-color: $image-hover-wrapper-banner-bg;
    color: $white;
    font-weight: 600;
    left: 0;
    padding: 0.5rem;
    position: absolute;
    top: $image-hover-wrapper-banner-topspace;
    width: $image-hover-wrapper-banner-width;
    z-index: 10;
  }
}
